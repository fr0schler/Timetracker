name: Deploy to Server

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # Optimiert für ARM64 Server
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:master

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/arm64
        push: true
        tags: ghcr.io/fr0schler/timetracker-frontend:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:master

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/arm64
        push: true
        tags: ghcr.io/fr0schler/timetracker-backend:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        timeout: 600s
        command_timeout: 300s
        script: |
          # Create project directory if it doesn't exist
          sudo mkdir -p ${{ secrets.DEPLOY_PATH }}
          cd ${{ secrets.DEPLOY_PATH }}

          # Clone or update repository
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi

          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull latest images (lowercase)
          docker pull ghcr.io/fr0schler/timetracker-frontend:main
          docker pull ghcr.io/fr0schler/timetracker-backend:main

          # Create production .env file
          cat > .env << 'EOF'
          # Database Configuration
          POSTGRES_DB=timetracker
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres

          # Backend Configuration
          SECRET_KEY=your-very-secure-secret-key-change-this-in-production
          ACCESS_TOKEN_EXPIRE_MINUTES=1440
          SESSION_EXPIRE_SECONDS=86400

          # Redis Configuration
          REDIS_URL=redis://redis:6379

          # Domain Configuration
          FRONTEND_DOMAIN=timetracker.hkp-solutions.de
          BACKEND_DOMAIN=timeapi.hkp-solutions.de
          API_URL=https://timeapi.hkp-solutions.de

          # Docker Images (automatically set by CI/CD)
          FRONTEND_IMAGE=ghcr.io/fr0schler/timetracker-frontend:main
          BACKEND_IMAGE=ghcr.io/fr0schler/timetracker-backend:main

          # Deployment Path (for GitHub Actions)
          DEPLOY_PATH=/root/timetracker
          EOF
          echo "✅ Created .env file with production values"

          # Update docker-compose with new images
          export FRONTEND_IMAGE=ghcr.io/fr0schler/timetracker-frontend:main
          export BACKEND_IMAGE=ghcr.io/fr0schler/timetracker-backend:main

          # Zero-downtime deployment strategy
          echo "🔄 Performing zero-downtime deployment..."

          # Start new containers alongside old ones (if they exist)
          docker compose -f docker-compose.prod.yml pull

          # Start database and Redis first if not running
          docker compose -f docker-compose.prod.yml up -d db redis

          # Wait for database and Redis to be ready
          echo "⏳ Waiting for database and Redis..."
          sleep 15

          # Deploy backend with rolling update
          echo "🔄 Updating backend..."
          docker compose -f docker-compose.prod.yml up -d backend --no-deps

          # Wait for backend to be ready
          echo "⏳ Waiting for backend to be ready..."
          sleep 10

          # Test backend health
          for i in {1..30}; do
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "✅ Backend is healthy"
              break
            fi
            echo "🔄 Waiting for backend... ($i/30)"
            sleep 2
          done

          # Deploy frontend
          echo "🔄 Updating frontend..."
          docker compose -f docker-compose.prod.yml up -d frontend --no-deps

          # Wait for frontend to be ready
          echo "⏳ Waiting for frontend to be ready..."
          sleep 5

          echo "⏳ Waiting for containers to be ready..."
          sleep 10

          echo "📋 Container status:"
          docker compose -f docker-compose.prod.yml ps

          echo "🧹 Cleaning up old images..."
          docker image prune -f

          echo "✅ Deployment completed!"